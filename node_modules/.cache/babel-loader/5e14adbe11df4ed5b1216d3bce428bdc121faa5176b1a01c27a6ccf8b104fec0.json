{"ast":null,"code":"// src/context/PersonalizationContext.jsx\nimport React,{createContext,useContext,useState}from'react';import{traderProfiles}from'../config/trader-profiles';import{jsx as _jsx}from\"react/jsx-runtime\";const PersonalizationContext=/*#__PURE__*/createContext();export function PersonalizationProvider(_ref){let{children}=_ref;const[userProfile,setUserProfile]=useState(()=>{const saved=localStorage.getItem('traderProfile');return saved?JSON.parse(saved):{type:'dayTrader'};});const updateProfile=newProfile=>{setUserProfile(newProfile);localStorage.setItem('traderProfile',JSON.stringify(newProfile));};const getLayout=()=>traderProfiles[userProfile.type]||traderProfiles.dayTrader;return/*#__PURE__*/_jsx(PersonalizationContext.Provider,{value:{userProfile,updateProfile,getLayout},children:children});}export const usePersonalizationContext=()=>{const context=useContext(PersonalizationContext);if(!context){throw new Error('usePersonalizationContext must be used within a PersonalizationProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","traderProfiles","jsx","_jsx","PersonalizationContext","PersonalizationProvider","_ref","children","userProfile","setUserProfile","saved","localStorage","getItem","JSON","parse","type","updateProfile","newProfile","setItem","stringify","getLayout","dayTrader","Provider","value","usePersonalizationContext","context","Error"],"sources":["C:/Dev/fintech/src/context/PersonalizationContext.jsx"],"sourcesContent":["// src/context/PersonalizationContext.jsx\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport { traderProfiles } from '../config/trader-profiles';\r\n\r\nconst PersonalizationContext = createContext();\r\n\r\nexport function PersonalizationProvider({ children }) {\r\n  const [userProfile, setUserProfile] = useState(() => {\r\n    const saved = localStorage.getItem('traderProfile');\r\n    return saved ? JSON.parse(saved) : { type: 'dayTrader' };\r\n  });\r\n\r\n  const updateProfile = (newProfile) => {\r\n    setUserProfile(newProfile);\r\n    localStorage.setItem('traderProfile', JSON.stringify(newProfile));\r\n  };\r\n\r\n  const getLayout = () => traderProfiles[userProfile.type] || traderProfiles.dayTrader;\r\n\r\n  return (\r\n    <PersonalizationContext.Provider value={{ userProfile, updateProfile, getLayout }}>\r\n      {children}\r\n    </PersonalizationContext.Provider>\r\n  );\r\n}\r\n\r\nexport const usePersonalizationContext = () => {\r\n  const context = useContext(PersonalizationContext);\r\n  if (!context) {\r\n    throw new Error('usePersonalizationContext must be used within a PersonalizationProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAClE,OAASC,cAAc,KAAQ,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3D,KAAM,CAAAC,sBAAsB,cAAGN,aAAa,CAAC,CAAC,CAE9C,MAAO,SAAS,CAAAO,uBAAuBA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClD,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,IAAM,CACnD,KAAM,CAAAU,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CACnD,MAAO,CAAAF,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAG,CAAEK,IAAI,CAAE,WAAY,CAAC,CAC1D,CAAC,CAAC,CAEF,KAAM,CAAAC,aAAa,CAAIC,UAAU,EAAK,CACpCR,cAAc,CAACQ,UAAU,CAAC,CAC1BN,YAAY,CAACO,OAAO,CAAC,eAAe,CAAEL,IAAI,CAACM,SAAS,CAACF,UAAU,CAAC,CAAC,CACnE,CAAC,CAED,KAAM,CAAAG,SAAS,CAAGA,CAAA,GAAMnB,cAAc,CAACO,WAAW,CAACO,IAAI,CAAC,EAAId,cAAc,CAACoB,SAAS,CAEpF,mBACElB,IAAA,CAACC,sBAAsB,CAACkB,QAAQ,EAACC,KAAK,CAAE,CAAEf,WAAW,CAAEQ,aAAa,CAAEI,SAAU,CAAE,CAAAb,QAAA,CAC/EA,QAAQ,CACsB,CAAC,CAEtC,CAEA,MAAO,MAAM,CAAAiB,yBAAyB,CAAGA,CAAA,GAAM,CAC7C,KAAM,CAAAC,OAAO,CAAG1B,UAAU,CAACK,sBAAsB,CAAC,CAClD,GAAI,CAACqB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,yEAAyE,CAAC,CAC5F,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}