This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.local
jsconfig.json
package.json
public/index.html
public/manifest.json
README.md
src/App.jsx
src/components/AI/PersonalizationEngine.js
src/components/AI/VoiceAssistant.jsx
src/components/Dashboard/LayoutGrid.jsx
src/components/Dashboard/WidgetFactory.jsx
src/components/ErrorBoundary.jsx
src/components/FundamentalsWidget.jsx
src/components/Gamification/Challenges.jsx
src/components/Gamification/Leaderboard.jsx
src/components/NewsWidget.jsx
src/components/OrderBookWidget.jsx
src/components/PortfolioWidget.jsx
src/components/ProfileSwitcher.jsx
src/components/RiskWidget.jsx
src/components/SectorIndustryWidget.jsx
src/components/SimpleOrderBook.jsx
src/components/TradingViewWidget.jsx
src/config/trader-profiles.js
src/config/widget-config.js
src/context/PersonalizationContext.jsx
src/hooks/useRealTimeData.js
src/index.js
src/styles/main.css
src/utils/layout-helpers.js
src/utils/layout-validation.js
src/utils/numbers.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.local">
REACT_APP_DATA_ENDPOINT=https://api.marketdata.in
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "components/*": ["./components/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="package.json">
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-grid-layout": "^1.3.4",
    "react-scripts": "^5.0.1",
    "react-speech-recognition": "^3.10.0",
    "react-ts-tradingview-widgets": "^1.2.8"
  },
  "devDependencies": {
    "gh-pages": "^6.3.0"
  },
  "homepage": "https://SpeedyOni.github.io/FinTech-Project-TIAU",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "Trading Dashboard",
  "name": "FinTech Trading Dashboard",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#0F172A",
  "background_color": "#0F172A"
}
</file>

<file path="README.md">
# FinTech-Project-TIAU
</file>

<file path="src/App.jsx">
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';
import './styles/main.css';
import React, { useEffect, useState } from 'react';
import { usePersonalizationContext } from './context/PersonalizationContext';
import LayoutGrid from './components/Dashboard/LayoutGrid';
import ProfileSwitcher from './components/ProfileSwitcher';
import ErrorBoundary from './components/ErrorBoundary';


export default function App() {
  const { getLayout } = usePersonalizationContext();
  const [layoutConfig, setLayoutConfig] = useState({ 
    layout: [], 
    widgets: [] 
  });

  useEffect(() => {
    const config = getLayout();
    setLayoutConfig(config);
  }, [getLayout]);

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <h1>FinTech Trading Dashboard</h1>
        <ProfileSwitcher />
      </header>
      <ErrorBoundary>
        <LayoutGrid {...layoutConfig} />
      </ErrorBoundary>
    </div>
  );
}
</file>

<file path="src/components/AI/PersonalizationEngine.js">
// src/components/AI/PersonalizationEngine.js
export const usePersonalization = () => {
  const [userProfile, setUserProfile] = useState(() => {
    const saved = localStorage.getItem('traderProfile');
    return saved ? JSON.parse(saved) : { type: 'dayTrader' };
  });

  const updateProfile = (newProfile) => {
    setUserProfile(newProfile);
    localStorage.setItem('traderProfile', JSON.stringify(newProfile));
  };

  const getLayout = (behavior) => {
    const profileMap = {
      highFrequency: 'dayTrader',
      longHold: 'investor',
      // Add more mappings as needed
    };
    
    return traderProfiles[profileMap[behavior] || 'dayTrader'];
  };

  return { userProfile, updateProfile, getLayout };
};
</file>

<file path="src/components/AI/VoiceAssistant.jsx">
import React, { useState } from 'react';
import { usePersonalizationContext } from '../../context/PersonalizationContext';

export default function VoiceAssistant() {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const { updateProfile, userProfile } = usePersonalizationContext();

  // Enhanced command processing function
  const processCommand = (command) => {
    const lowerCommand = command.toLowerCase().trim();
    console.log('Processing command:', lowerCommand); // Debug log
    
    // Chart related commands
    if (lowerCommand.includes('show') && (lowerCommand.includes('nifty') || lowerCommand.includes('chart'))) {
      setResponse('‚úÖ Displaying NIFTY 50 chart with technical indicators...');
      return;
    }
    
    // Profile switching commands
    if (lowerCommand.includes('day trader') || lowerCommand.includes('day trading')) {
      updateProfile({ type: 'dayTrader' });
      setResponse('‚úÖ Switched to Day Trader layout with order book and real-time data.');
      return;
    }
    
    if (lowerCommand.includes('investor') || lowerCommand.includes('long term')) {
      updateProfile({ type: 'investor' });
      setResponse('‚úÖ Switched to Long-Term Investor layout with fundamentals.');
      return;
    }
    
    // Stock analysis commands
    if (lowerCommand.includes('undervalued') || lowerCommand.includes('value stocks')) {
      setResponse('üìä Scanning for undervalued stocks: TITAN (P/E: 24.5), HDFC Bank (P/E: 18.2), TCS (P/E: 28.1) show strong fundamentals with institutional buying...');
      return;
    }
    
    // Market sentiment commands
    if (lowerCommand.includes('market sentiment') || lowerCommand.includes('sentiment')) {
      setResponse('üìà Current market sentiment: Bullish (67%). Banking sector leading gains (+2.4%), tech sector mixed. NIFTY resistance at 25,200.');
      return;
    }
    
    // Clear/reset commands
    if (lowerCommand.includes('clear') || lowerCommand.includes('reset')) {
      setTranscript('');
      setResponse('');
      return;
    }
    
    // Default response
    setResponse('‚ùì Try: "Show NIFTY chart", "Switch to day trader", "Find undervalued stocks", "Market sentiment", or "Clear"');
  };

  const handleVoiceClick = () => {
    if (!isListening) {
      setIsListening(true);
      setTranscript('üé§ Listening...');
      setResponse('');
      
      // Enhanced Web Speech API setup
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';
        recognition.maxAlternatives = 1;
        
        recognition.onstart = () => {
          console.log('Speech recognition started');
        };
        
        recognition.onresult = (event) => {
          const spokenText = event.results[0][0].transcript;
          const confidence = event.results[0][0].confidence;
          
          console.log('Recognized:', spokenText, 'Confidence:', confidence);
          
          setTranscript(`"${spokenText}"`);
          processCommand(spokenText);
          setIsListening(false);
        };
        
        recognition.onerror = (event) => {
          console.error('Speech recognition error:', event.error);
          setTranscript('‚ùå Sorry, I couldn\'t understand that. Please try again.');
          setResponse('');
          setIsListening(false);
        };
        
        recognition.onend = () => {
          console.log('Speech recognition ended');
          setIsListening(false);
        };
        
        recognition.start();
      } else {
        // Enhanced fallback with realistic simulation
        setTimeout(() => {
          const simulatedCommands = [
            'Show me NIFTY 50 chart',
            'Find undervalued stocks',
            'Switch to day trader layout',
            'What is market sentiment today'
          ];
          const randomCommand = simulatedCommands[Math.floor(Math.random() * simulatedCommands.length)];
          setTranscript(`"${randomCommand}" (Simulated)`);
          processCommand(randomCommand);
          setIsListening(false);
        }, 2000);
      }
    }
  };

  return (
    <div className="widget voice-assistant">
      <div className="widget-header">
        <h3>ü§ñ AI Trading Assistant</h3>
        <span className="profile-indicator">Profile: {userProfile.type}</span>
      </div>
      
      <button 
        className={`voice-button ${isListening ? 'listening' : ''}`}
        onClick={handleVoiceClick}
        disabled={isListening}
      >
        {isListening ? 'üî¥ Listening...' : 'üé§ Click to Speak'}
      </button>
      
      {transcript && (
        <div className="transcript">
          <strong>You said:</strong> {transcript}
        </div>
      )}
      
      {response && (
        <div className="ai-response">
          <strong>AI Response:</strong> {response}
        </div>
      )}
      
      <div className="suggested-commands">
        <p className="commands-label">üí° Try saying:</p>
        <ul>
          <li>"Show NIFTY chart"</li>
          <li>"Find undervalued stocks"</li>
          <li>"Switch to day trader"</li>
          <li>"Market sentiment"</li>
          <li>"Clear" (to reset)</li>
        </ul>
      </div>
    </div>
  );
}
</file>

<file path="src/components/Dashboard/LayoutGrid.jsx">
import React from 'react';
import { Responsive, WidthProvider } from 'react-grid-layout';
import { usePersonalizationContext } from '../../context/PersonalizationContext';
import WidgetFactory from './WidgetFactory';
import ErrorBoundary from '../ErrorBoundary';
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';

const ResponsiveGridLayout = WidthProvider(Responsive);

export default function LayoutGrid() {
  const { getLayout } = usePersonalizationContext();
  const layoutData = getLayout();
  const layouts = layoutData?.layout || { lg: [] };
  const widgets = layoutData?.widgets || [];

  return (
    <ResponsiveGridLayout
      className="dashboard-grid"
      layouts={layouts}
      breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}
      cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}
      rowHeight={40}
      isDraggable
      isResizable
      draggableHandle=".drag-handle"
    >
      {widgets.map(widget => (
        <div key={widget.i}>
          <ErrorBoundary>
            <div className="drag-handle" />
            <WidgetFactory type={widget.type} symbol={widget.symbol} />
          </ErrorBoundary>
        </div>
      ))}
    </ResponsiveGridLayout>
  );
}
</file>

<file path="src/components/Dashboard/WidgetFactory.jsx">
import React from 'react';
import TradingViewWidget from '../TradingViewWidget';
import SimpleOrderBook from '../SimpleOrderBook';
import NewsWidget from '../NewsWidget';
import FundamentalsWidget from '../FundamentalsWidget';
import PortfolioWidget from '../PortfolioWidget';
import RiskWidget from '../RiskWidget';
import LeaderboardWidget from '../Gamification/Leaderboard';
import ChallengesWidget from '../Gamification/Challenges';
import VoiceAssistant from '../AI/VoiceAssistant';

export default function WidgetFactory({ type, symbol, onSymbolChange }) {
  switch(type) {
    case 'chart': 
      return <TradingViewWidget symbol={symbol} onSymbolChange={onSymbolChange} />;
    case 'orderbook': 
      return <SimpleOrderBook symbol={symbol} />;
    case 'news': 
      return <NewsWidget symbol={symbol} />;
    case 'fundamentals': 
      return <FundamentalsWidget symbol={symbol} />;
    case 'portfolio': 
      return <PortfolioWidget />;
    case 'risk': 
      return <RiskWidget />;
    case 'leaderboard': 
      return <LeaderboardWidget />;
    case 'challenges': 
      return <ChallengesWidget />;
    case 'voice': 
      return <VoiceAssistant />;
    case 'sectors': 
      return <div className="widget">üè≠ Sectors Widget (Coming Soon)</div>;
    case 'esg': 
      return <div className="widget">üå± ESG Metrics (Coming Soon)</div>;
    case 'dividends': 
      return <div className="widget">üí∞ Dividend Tracker (Coming Soon)</div>;
    default: 
      return <div className="widget unknown-widget">Unknown widget type: {type}</div>;
  }
}
</file>

<file path="src/components/ErrorBoundary.jsx">
import React from 'react';

export default class ErrorBoundary extends React.Component {
  state = { 
    hasError: false, 
    errorInfo: null,
    retryCount: 0 
  };

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Financial Component Error:', error, errorInfo);
    this.setState({ errorInfo });
    
    // Log specific big.js errors for debugging
    if (error.message.includes('[big.js]')) {
      console.error('Big.js number validation failed:', {
        error: error.message,
        component: errorInfo.componentStack
      });
    }
  }

  handleRetry = () => {
    this.setState({ 
      hasError: false, 
      errorInfo: null,
      retryCount: this.state.retryCount + 1 
    });
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-fallback financial-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h3>Market Data Temporarily Unavailable</h3>
          <p>We're experiencing issues loading real-time market data.</p>
          {this.state.retryCount < 3 && (
            <button 
              onClick={this.handleRetry}
              className="retry-button"
            >
              Retry Loading Data
            </button>
          )}
          {this.state.retryCount >= 3 && (
            <button 
              onClick={() => window.location.reload()}
              className="reload-button"
            >
              Reload Dashboard
            </button>
          )}
        </div>
      );
    }
    return this.props.children;
  }
}
</file>

<file path="src/components/FundamentalsWidget.jsx">
import React, { useState, useEffect } from 'react';

export default function FundamentalsWidget({ symbol = "NSE:RELIANCE" }) {
  const [fundamentals, setFundamentals] = useState({});
  const symbolName = symbol.split(':')[1] || 'RELIANCE';

  useEffect(() => {
    // Mock fundamentals data based on symbol
    const mockData = {
      'RELIANCE': {
        pe: '24.5', marketCap: '‚Çπ15.2L Cr', week52High: '‚Çπ3,014', week52Low: '‚Çπ2,200',
        dividend: '2.4%', roe: '12.8%', debt: '‚Çπ3.2L Cr', revenue: '‚Çπ8.7L Cr'
      },
      'TCS': {
        pe: '28.1', marketCap: '‚Çπ12.8L Cr', week52High: '‚Çπ4,120', week52Low: '‚Çπ3,200',
        dividend: '3.1%', roe: '45.2%', debt: '‚Çπ12K Cr', revenue: '‚Çπ2.1L Cr'
      },
      'HDFCBANK': {
        pe: '18.2', marketCap: '‚Çπ11.5L Cr', week52High: '‚Çπ1,740', week52Low: '‚Çπ1,420',
        dividend: '1.8%', roe: '18.5%', debt: '‚Çπ15.2L Cr', revenue: '‚Çπ1.8L Cr'
      }
    };
    setFundamentals(mockData[symbolName] || mockData['RELIANCE']);
  }, [symbol, symbolName]);

  return (
    <div className="widget fundamentals-widget">
      <div className="widget-header">
        <h3>üìä {symbolName} Fundamentals</h3>
      </div>
      <div className="fundamentals-grid">
        <div className="metric">
          <span className="label">P/E Ratio:</span>
          <span className="value">{fundamentals.pe}</span>
        </div>
        <div className="metric">
          <span className="label">Market Cap:</span>
          <span className="value">{fundamentals.marketCap}</span>
        </div>
        <div className="metric">
          <span className="label">52W High:</span>
          <span className="value">{fundamentals.week52High}</span>
        </div>
        <div className="metric">
          <span className="label">52W Low:</span>
          <span className="value">{fundamentals.week52Low}</span>
        </div>
        <div className="metric">
          <span className="label">Dividend:</span>
          <span className="value">{fundamentals.dividend}</span>
        </div>
        <div className="metric">
          <span className="label">ROE:</span>
          <span className="value">{fundamentals.roe}</span>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/Gamification/Challenges.jsx">
import React from 'react';

export default function ChallengesWidget() {
  const challenges = [
    { 
      title: 'Weekly Profit Challenge', 
      target: '5% Return', 
      progress: 60,
      status: 'active'
    },
    { 
      title: 'Risk Management Master', 
      target: 'Max 2% Drawdown', 
      progress: 85,
      status: 'active'
    }
  ];

  return (
    <div className="widget challenges-widget">
      <h3>Active Challenges</h3>
      <div className="challenges-list">
        {challenges.map((challenge, index) => (
          <div key={index} className="challenge-item">
            <div className="challenge-header">
              <h4>{challenge.title}</h4>
              <span className={`status ${challenge.status}`}>
                {challenge.status}
              </span>
            </div>
            <div className="challenge-target">
              Target: {challenge.target}
            </div>
            <div className="progress-container">
              <div 
                className="progress-bar"
                style={{ width: `${challenge.progress}%` }}
              />
            </div>
            <div className="progress-text">
              {challenge.progress}% Complete
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/Gamification/Leaderboard.jsx">
import React from 'react';

export default function LeaderboardWidget() {
  const leaders = [
    { name: 'TradingAce', pnl: '+15.2%', streak: 12 },
    { name: 'MarketWiz', pnl: '+12.8%', streak: 8 },
    { name: 'BullRun2024', pnl: '+10.5%', streak: 15 }
  ];

  return (
    <div className="widget leaderboard-widget">
      <h3>Top Performers</h3>
      <div className="leaderboard-list">
        {leaders.map((trader, index) => (
          <div key={trader.name} className="leaderboard-item">
            <span className="rank">#{index + 1}</span>
            <span className="name">{trader.name}</span>
            <span className="pnl">{trader.pnl}</span>
            <span className="streak">{trader.streak} days</span>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/NewsWidget.jsx">
import React, { useState, useEffect } from 'react';

export default function NewsWidget({ symbol = "NSE:RELIANCE" }) {
  const [news, setNews] = useState([]);
  const symbolName = symbol.split(':')[1] || 'RELIANCE';

  useEffect(() => {
    // Simulate news based on symbol
    const mockNews = [
      {
        time: '09:30 AM',
        headline: `${symbolName} Q3 results show strong growth in revenue`,
        sentiment: 'positive'
      },
      {
        time: '08:45 AM', 
        headline: `Institutional buying increases in ${symbolName}`,
        sentiment: 'positive'
      },
      {
        time: '07:20 AM',
        headline: `Market analysts upgrade ${symbolName} to BUY`,
        sentiment: 'positive'
      }
    ];
    setNews(mockNews);
  }, [symbol, symbolName]);

  return (
    <div className="widget news-widget">
      <div className="widget-header">
        <h3>üì∞ {symbolName} News</h3>
        <span className="live-indicator">Live</span>
      </div>
      <div className="news-list">
        {news.map((item, index) => (
          <div key={index} className={`news-item ${item.sentiment}`}>
            <span className="news-time">{item.time}</span>
            <span className="news-headline">{item.headline}</span>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/OrderBookWidget.jsx">
import React, { useState, useEffect } from 'react';

export default function OrderBookWidget() {
  const [orderData, setOrderData] = useState({
    asks: [
      { price: 3452.50, size: 1200, total: 1200 },
      { price: 3451.75, size: 800, total: 2000 },
      { price: 3451.25, size: 1500, total: 3500 }
    ],
    bids: [
      { price: 3449.75, size: 2100, total: 2100 },
      { price: 3449.25, size: 1800, total: 3900 },
      { price: 3448.50, size: 950, total: 4850 }
    ]
  });

  // Simulate real-time updates for your fintech dashboard
  useEffect(() => {
    const interval = setInterval(() => {
      setOrderData(prev => ({
        asks: prev.asks.map(order => ({
          ...order,
          price: order.price + (Math.random() - 0.5) * 0.25
        })),
        bids: prev.bids.map(order => ({
          ...order,
          price: order.price + (Math.random() - 0.5) * 0.25
        }))
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const spread = orderData.asks[orderData.asks.length - 1]?.price - orderData.bids[0]?.price;
  const spreadPercent = (spread / orderData.bids[0]?.price * 100);

  return (
    <div className="widget orderbook-widget">
      <div className="widget-header">
        <h3>NIFTY 50 Order Book</h3>
        <div className="live-indicator">
          <span className="status-dot"></span>
          Live
        </div>
      </div>
      
      <div className="orderbook-container">
        <div className="orderbook-section asks-section">
          <div className="section-header">
            <span>Price</span>
            <span>Size</span>
            <span>Total</span>
          </div>
          {orderData.asks.reverse().map((order, idx) => (
            <div key={idx} className="order-row ask-row">
              <span className="price ask-price">‚Çπ{order.price.toFixed(2)}</span>
              <span className="size">{order.size.toLocaleString()}</span>
              <span className="total">{order.total.toLocaleString()}</span>
            </div>
          ))}
        </div>
        
        <div className="spread-indicator">
          <div className="spread-value">
            Spread: ‚Çπ{spread?.toFixed(2)} ({spreadPercent?.toFixed(3)}%)
          </div>
        </div>
        
        <div className="orderbook-section bids-section">
          {orderData.bids.map((order, idx) => (
            <div key={idx} className="order-row bid-row">
              <span className="price bid-price">‚Çπ{order.price.toFixed(2)}</span>
              <span className="size">{order.size.toLocaleString()}</span>
              <span className="total">{order.total.toLocaleString()}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/PortfolioWidget.jsx">
import React from 'react';

export default function PortfolioWidget() {
  const holdings = [
    { symbol: 'RELIANCE', qty: 50, avg: 2450, current: 2580, pnl: '+5.3%' },
    { symbol: 'TCS', qty: 25, avg: 3200, current: 3840, pnl: '+20.0%' },
    { symbol: 'HDFCBANK', qty: 100, avg: 1520, current: 1675, pnl: '+10.2%' }
  ];

  return (
    <div className="widget portfolio-widget">
      <div className="widget-header">
        <h3>üíº Portfolio</h3>
        <span className="total-pnl">+‚Çπ45,230 (12.5%)</span>
      </div>
      <div className="holdings-list">
        {holdings.map((holding, index) => (
          <div key={index} className="holding-item">
            <div className="symbol">{holding.symbol}</div>
            <div className="qty">{holding.qty}</div>
            <div className="avg">‚Çπ{holding.avg}</div>
            <div className={`pnl ${holding.pnl.startsWith('+') ? 'positive' : 'negative'}`}>
              {holding.pnl}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/ProfileSwitcher.jsx">
import React from 'react';
import { usePersonalizationContext } from '../context/PersonalizationContext';

export default function ProfileSwitcher() {
  const { userProfile, updateProfile } = usePersonalizationContext();

  const profiles = [
    { key: 'dayTrader', label: '‚ö° Day Trader' },
    { key: 'swingTrader', label: 'üìà Swing Trader' },
    { key: 'investor', label: 'üíé Long-Term Investor' }
  ];

  return (
    <div className="profile-switcher">
      {profiles.map(profile => (
        <button
          key={profile.key}
          className={`profile-btn ${userProfile.type === profile.key ? 'active' : ''}`}
          onClick={() => updateProfile({ type: profile.key })}
        >
          {profile.label}
        </button>
      ))}
    </div>
  );
}
</file>

<file path="src/components/RiskWidget.jsx">
import React from 'react';

export default function RiskWidget() {
  return (
    <div className="widget risk-widget">
      <div className="widget-header">
        <h3>‚ö†Ô∏è Risk Management</h3>
      </div>
      <div className="risk-metrics">
        <div className="metric">
          <span className="label">Value at Risk (1D):</span>
          <span className="value">‚Çπ8,450</span>
        </div>
        <div className="metric">
          <span className="label">Portfolio Beta:</span>
          <span className="value">1.24</span>
        </div>
        <div className="metric">
          <span className="label">Max Drawdown:</span>
          <span className="value">-5.2%</span>
        </div>
        <div className="metric">
          <span className="label">Sharpe Ratio:</span>
          <span className="value">1.45</span>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/SectorIndustryWidget.jsx">
import { useState, useEffect } from 'react';

export default function SectorIndustryWidget() {
  const [expandedSector, setExpandedSector] = useState(null);
  const [sectors] = useState([
    { 
      name: 'Banking', 
      performance: '+2.4%', 
      topStocks: ['HDFCBANK', 'ICICIBANK'],
      news: 'RBI Policy Announcement Expected'
    },
  ]);

  return (
    <div className="widget sector-industry">
      <h3>Sectors & Industries</h3>
      <div className="sector-list">
        {sectors.map((sector) => (
          <div 
            key={sector.name} 
            className="sector-item"
            onClick={() => setExpandedSector(expandedSector === sector.name ? null : sector.name)}
          >
            <div className="sector-header">
              <span>{sector.name}</span>
              <span className="performance">{sector.performance}</span>
            </div>
            
            {expandedSector === sector.name && (
              <div className="sector-details">
                <div className="subsection">
                  <h4>Top Stocks</h4>
                  <ul>
                    {sector.topStocks.map(stock => (
                      <li key={stock}>{stock}</li>
                    ))}
                  </ul>
                </div>
                <div className="subsection">
                  <h4>Latest News</h4>
                  <p>{sector.news}</p>
                </div>
                <iframe
                  src="https://s3.tradingview.com/embed-widget/symbol-overview/?locale=en#%7B%22symbols%22%3A%5B%5B%22NSE%3ANIFTY_BANK%22%5D%5D%2C%22chartOnly%22%3Afalse%2C%22width%22%3A%22100%25%22%2C%22height%22%3A%22100%25%22%2C%22colorTheme%22%3A%22dark%22%7D"
                  className="sector-chart"
                />
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="src/components/SimpleOrderBook.jsx">
import React, { useState, useEffect } from 'react';

export default function SimpleOrderBook() {
  const [orderData, setOrderData] = useState({
    asks: [
      { price: 3452.50, size: 1200, total: 1200 },
      { price: 3451.75, size: 800, total: 2000 },
      { price: 3451.25, size: 1500, total: 3500 }
    ],
    bids: [
      { price: 3449.75, size: 2100, total: 2100 },
      { price: 3449.25, size: 1800, total: 3900 },
      { price: 3448.50, size: 950, total: 4850 }
    ]
  });

  // Simulate real-time updates for your fintech dashboard
  useEffect(() => {
    const interval = setInterval(() => {
      setOrderData(prev => ({
        asks: prev.asks.map(order => ({
          ...order,
          price: order.price + (Math.random() - 0.5) * 0.25
        })),
        bids: prev.bids.map(order => ({
          ...order,
          price: order.price + (Math.random() - 0.5) * 0.25
        }))
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const spread = orderData.asks[orderData.asks.length - 1]?.price - orderData.bids[0]?.price;
  const spreadPercent = (spread / orderData.bids[0]?.price * 100);

  return (
    <div className="widget simple-orderbook">
      <div className="widget-header">
        <h3>NIFTY 50 Order Book</h3>
        <div className="live-indicator">
          <span className="status-dot"></span>
          Live
        </div>
      </div>
      
      <div className="orderbook-container">
        <div className="orderbook-section asks-section">
          <div className="section-header">
            <span>Price</span>
            <span>Size</span>
            <span>Total</span>
          </div>
          {orderData.asks.reverse().map((order, idx) => (
            <div key={idx} className="order-row ask-row">
              <span className="price ask-price">‚Çπ{order.price.toFixed(2)}</span>
              <span className="size">{order.size.toLocaleString()}</span>
              <span className="total">{order.total.toLocaleString()}</span>
            </div>
          ))}
        </div>
        
        <div className="spread-indicator">
          <div className="spread-value">
            Spread: ‚Çπ{spread?.toFixed(2)} ({spreadPercent?.toFixed(3)}%)
          </div>
        </div>
        
        <div className="orderbook-section bids-section">
          {orderData.bids.map((order, idx) => (
            <div key={idx} className="order-row bid-row">
              <span className="price bid-price">‚Çπ{order.price.toFixed(2)}</span>
              <span className="size">{order.size.toLocaleString()}</span>
              <span className="total">{order.total.toLocaleString()}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/TradingViewWidget.jsx">
import React, { useEffect, useRef, useState } from 'react';

export default function TradingViewWidget({ symbol = "NSE:RELIANCE", onSymbolChange }) {
  const containerRef = useRef(null);
  const [currentSymbol, setCurrentSymbol] = useState(symbol);

  useEffect(() => {
    if (containerRef.current) containerRef.current.innerHTML = '';
    
    const loadScript = () => {
      return new Promise((resolve) => {
        if (window.TradingView) return resolve();
        const script = document.createElement('script');
        script.src = 'https://s3.tradingview.com/tv.js';
        script.async = true;
        script.onload = resolve;
        document.head.appendChild(script);
      });
    };

    loadScript().then(() => {
      if (containerRef.current && window.TradingView) {
        new window.TradingView.widget({
          width: "100%",
          height: "100%",
          symbol: currentSymbol,
          interval: "D",
          timezone: "Asia/Kolkata",
          theme: "dark",
          style: "1",
          locale: "en",
          toolbar_bg: "#1E293B",
          enable_publishing: false,
          allow_symbol_change: true,
          container_id: containerRef.current.id,
          hide_side_toolbar: false,
          studies: ["MACD@tv-basicstudies"],
          withdateranges: true,
          autosize: true,
          onSymbolChanged: (symbolInfo) => {
            setCurrentSymbol(symbolInfo.name);
            if (onSymbolChange) onSymbolChange(symbolInfo.name);
          }
        });
      }
    });
  }, [currentSymbol]);

  const handleSymbolChange = (newSymbol) => {
    setCurrentSymbol(newSymbol);
    if (onSymbolChange) onSymbolChange(newSymbol);
  };

  return (
    <div className="widget trading-chart">
      <div className="widget-header">
        <h3>{currentSymbol} Live Chart</h3>
        <div className="symbol-selector">
          <select 
            value={currentSymbol} 
            onChange={(e) => handleSymbolChange(e.target.value)}
            className="symbol-dropdown"
          >
            <option value="NSE:RELIANCE">Reliance Industries</option>
            <option value="NSE:TCS">TCS</option>
            <option value="NSE:HDFCBANK">HDFC Bank</option>
            <option value="NSE:INFY">Infosys</option>
            <option value="NSE:ICICIBANK">ICICI Bank</option>
            <option value="NSE:LT">L&T</option>
            <option value="NSE:TITAN">Titan</option>
          </select>
        </div>
      </div>
      <div 
        ref={containerRef}
        id={`tradingview_${Math.random().toString(36).substr(2, 9)}`}
        style={{ width: '100%', height: 'calc(100% - 60px)', minHeight: '400px' }}
      />
    </div>
  );
}
</file>

<file path="src/config/trader-profiles.js">
export const traderProfiles = {
  dayTrader: {
    layout: {
      lg: [
        { i: 'chart', x: 0, y: 0, w: 8, h: 12, minW: 6, maxW: 12, minH: 8, maxH: 15 },
        { i: 'orderbook', x: 8, y: 0, w: 4, h: 12, minW: 3, maxW: 6, minH: 8, maxH: 15 },
        { i: 'news', x: 0, y: 12, w: 6, h: 5, minW: 4, maxW: 8, minH: 3, maxH: 7 },
        { i: 'leaderboard', x: 6, y: 12, w: 3, h: 5, minW: 2, maxW: 4, minH: 3, maxH: 7 },
        { i: 'challenges', x: 9, y: 12, w: 3, h: 5, minW: 2, maxW: 4, minH: 3, maxH: 7 },
        { i: 'voice', x: 0, y: 17, w: 8, h: 4, minW: 4, maxW: 10, minH: 3, maxH: 6 },
        { i: 'risk', x: 8, y: 17, w: 4, h: 4, minW: 3, maxW: 6, minH: 3, maxH: 6 }
      ]
    },
    widgets: [
      { i: 'chart', type: 'chart', symbol: 'NSE:RELIANCE' },
      { i: 'orderbook', type: 'orderbook' },
      { i: 'news', type: 'news' },
      { i: 'leaderboard', type: 'leaderboard' },
      { i: 'challenges', type: 'challenges' },
      { i: 'voice', type: 'voice' },
      { i: 'risk', type: 'risk' }
    ]
  },

  swingTrader: {
    layout: {
      lg: [
        { i: 'chart', x: 0, y: 0, w: 8, h: 12, minW: 6, maxW: 12, minH: 8, maxH: 15 },
        { i: 'news', x: 8, y: 0, w: 4, h: 6, minW: 3, maxW: 6, minH: 4, maxH: 8 },
        { i: 'fundamentals', x: 8, y: 6, w: 4, h: 6, minW: 3, maxW: 6, minH: 4, maxH: 8 },
        { i: 'portfolio', x: 0, y: 12, w: 6, h: 5, minW: 4, maxW: 8, minH: 3, maxH: 7 },
        { i: 'voice', x: 6, y: 12, w: 6, h: 5, minW: 4, maxW: 8, minH: 3, maxH: 7 }
      ]
    },
    widgets: [
      { i: 'chart', type: 'chart', symbol: 'NSE:TCS' },
      { i: 'news', type: 'news' },
      { i: 'fundamentals', type: 'fundamentals' },
      { i: 'portfolio', type: 'portfolio' },
      { i: 'voice', type: 'voice' }
    ]
  },

  investor: {
    layout: {
      lg: [
        { i: 'chart', x: 0, y: 0, w: 8, h: 10, minW: 6, maxW: 12, minH: 6, maxH: 12 },
        { i: 'fundamentals', x: 8, y: 0, w: 4, h: 10, minW: 3, maxW: 6, minH: 6, maxH: 12 },
        { i: 'portfolio', x: 0, y: 10, w: 6, h: 5, minW: 4, maxW: 8, minH: 3, maxH: 7 },
        { i: 'news', x: 6, y: 10, w: 6, h: 5, minW: 4, maxW: 8, minH: 3, maxH: 7 },
        { i: 'voice', x: 0, y: 15, w: 12, h: 4, minW: 6, maxW: 12, minH: 3, maxH: 6 }
      ]
    },
    widgets: [
      { i: 'chart', type: 'chart', symbol: 'NSE:HDFCBANK' },
      { i: 'fundamentals', type: 'fundamentals' },
      { i: 'portfolio', type: 'portfolio' },
      { i: 'news', type: 'news' },
      { i: 'voice', type: 'voice' }
    ]
  }
};
</file>

<file path="src/config/widget-config.js">
// src/config/widget-config.js
export const WIDGETS = [
  {
    type: "chart",
    displayName: "TradingView Chart",
    defaultProps: { symbol: "NSE:TITAN" }
  },
  {
    type: "news",
    displayName: "News & Sentiment",
    defaultProps: { symbol: "NSE:TITAN" }
  },
  {
    type: "fundamentals",
    displayName: "Fundamentals",
    defaultProps: { symbol: "NSE:TITAN" }
  },
  {
    type: "leaderboard",
    displayName: "Leaderboard",
    defaultProps: {}
  },
  {
    type: "challenges",
    displayName: "Challenges",
    defaultProps: {}
  },
  {
    type: "voice",
    displayName: "AI Voice Assistant",
    defaultProps: {}
  }
];
</file>

<file path="src/context/PersonalizationContext.jsx">
// src/context/PersonalizationContext.jsx
import React, { createContext, useContext, useState } from 'react';
import { traderProfiles } from '../config/trader-profiles';

const PersonalizationContext = createContext();

export function PersonalizationProvider({ children }) {
  const [userProfile, setUserProfile] = useState(() => {
    const saved = localStorage.getItem('traderProfile');
    return saved ? JSON.parse(saved) : { type: 'dayTrader' };
  });

  const updateProfile = (newProfile) => {
    setUserProfile(newProfile);
    localStorage.setItem('traderProfile', JSON.stringify(newProfile));
  };

  const getLayout = () => traderProfiles[userProfile.type] || traderProfiles.dayTrader;

  return (
    <PersonalizationContext.Provider value={{ userProfile, updateProfile, getLayout }}>
      {children}
    </PersonalizationContext.Provider>
  );
}

export const usePersonalizationContext = () => {
  const context = useContext(PersonalizationContext);
  if (!context) {
    throw new Error('usePersonalizationContext must be used within a PersonalizationProvider');
  }
  return context;
};
</file>

<file path="src/hooks/useRealTimeData.js">
// src/hooks/useRealTimeData.js
import { useEffect, useState } from 'react';

export function useRealTimeData(symbol = 'NSE:TITAN') {
  const [data, setData] = useState([]);

  useEffect(() => {
    const ws = new WebSocket('wss://your-market-data-provider.com/ws');
    
    ws.onopen = () => {
      ws.send(JSON.stringify({ action: 'subscribe', symbol }));
    };

    ws.onmessage = (event) => {
      const newData = JSON.parse(event.data);
      setData(prev => [...prev.slice(-100), newData]); // Keep last 100 data points
    };

    return () => {
      ws.close();
    };
  }, [symbol]);

  return data;
}
</file>

<file path="src/index.js">
import 'react-grid-layout/css/styles.css';
import 'react-resizable/css/styles.css';
import './styles/main.css'; // Your custom styles
import React from 'react';
import { createRoot } from 'react-dom/client';
import { PersonalizationProvider } from './context/PersonalizationContext';
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(
  <PersonalizationProvider>
    <App />
  </PersonalizationProvider>
);
</file>

<file path="src/styles/main.css">
/* Modern Font Import */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');

/* CSS Reset & Variables */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /* Gaming-Inspired Color Palette */
  --trade-dark: #0a0e1a;
  --trade-darker: #070b14;
  --trade-slate: #1a1f2e;
  --trade-slate-light: #242938;
  --trade-neon: #00f5a0;
  --trade-neon-glow: #00f5a0;
  --trade-cyan: #00d4ff;
  --trade-purple: #8b5cf6;
  --trade-alert: #ff6b6b;
  --trade-warning: #ffd93d;
  --trade-text: #e2e8f0;
  --trade-text-muted: #94a3b8;
  --trade-border: rgba(255, 255, 255, 0.1);
  --trade-hover: rgba(0, 245, 160, 0.1);
  
  /* Gradients */
  --gradient-primary: linear-gradient(135deg, var(--trade-neon), var(--trade-cyan));
  --gradient-card: linear-gradient(145deg, var(--trade-slate), var(--trade-slate-light));
  --gradient-glow: radial-gradient(circle, rgba(0, 245, 160, 0.15), transparent);
}

/* Global Styles */
body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', system-ui, sans-serif;
  background: var(--trade-dark);
  color: var(--trade-text);
  line-height: 1.6;
  overflow-x: hidden;
  min-height: 100vh;
  background-image: 
    radial-gradient(circle at 20% 50%, rgba(0, 245, 160, 0.05) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(0, 212, 255, 0.05) 0%, transparent 50%),
    radial-gradient(circle at 40% 80%, rgba(139, 92, 246, 0.05) 0%, transparent 50%);
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: var(--trade-darker);
}

::-webkit-scrollbar-thumb {
  background: var(--trade-neon);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--trade-cyan);
}

/* Dashboard Container */
.dashboard-container {
  padding: 2rem;
  max-width: 1920px;
  margin: 0 auto;
  min-height: 100vh;
}

/* Dashboard Header */
.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding: 1.5rem 2rem;
  background: var(--gradient-card);
  border-radius: 16px;
  border: 1px solid var(--trade-border);
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
}

.dashboard-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--gradient-glow);
  opacity: 0.5;
  z-index: -1;
}

.dashboard-header h1 {
  font-size: 2.5rem;
  font-weight: 800;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin: 0;
  text-shadow: 0 0 30px rgba(0, 245, 160, 0.3);
}

/* Profile Switcher */
.profile-switcher {
  display: flex;
  gap: 0.75rem;
  background: rgba(0, 0, 0, 0.3);
  padding: 0.5rem;
  border-radius: 12px;
  border: 1px solid var(--trade-border);
}

.profile-btn {
  background: transparent;
  color: var(--trade-text-muted);
  border: 1px solid var(--trade-border);
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  font-size: 0.9rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.profile-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: var(--gradient-primary);
  transition: left 0.3s ease;
  z-index: -1;
}

.profile-btn:hover {
  color: var(--trade-neon);
  border-color: var(--trade-neon);
  box-shadow: 0 0 20px rgba(0, 245, 160, 0.2);
  transform: translateY(-2px);
}

.profile-btn:hover::before {
  left: 0;
}

.profile-btn.active {
  background: var(--gradient-primary);
  color: var(--trade-dark);
  border-color: var(--trade-neon);
  box-shadow: 0 0 25px rgba(0, 245, 160, 0.4);
}

/* Grid Layout */
.dashboard-grid {
  min-height: 600px;
  margin-top: 1rem;
}

.react-grid-item {
  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 16px;
  overflow: hidden;
  position: relative;
}

.react-grid-item:hover {
  transform: translateY(-4px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.react-grid-item.react-grid-placeholder {
  background: linear-gradient(45deg, rgba(0, 245, 160, 0.1), rgba(0, 212, 255, 0.1));
  border: 2px dashed var(--trade-neon);
  border-radius: 16px;
  opacity: 0.6;
  z-index: 2;
}

/* Widget Base Styles */
.widget {
  background: var(--gradient-card);
  border-radius: 16px;
  padding: 1.5rem;
  height: 100%;
  border: 1px solid var(--trade-border);
  backdrop-filter: blur(20px);
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.widget::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: var(--gradient-primary);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.widget:hover::before {
  opacity: 1;
}

.widget:hover {
  border-color: var(--trade-neon);
  box-shadow: 0 0 30px rgba(0, 245, 160, 0.1);
}

/* Widget Header */
.widget-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--trade-border);
}

.widget-header h3 {
  font-size: 1.2rem;
  font-weight: 700;
  color: var(--trade-neon);
  margin: 0;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.live-indicator {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--trade-neon);
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-dot {
  width: 8px;
  height: 8px;
  background: var(--trade-neon);
  border-radius: 50%;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { opacity: 1; transform: scale(1); }
  50% { opacity: 0.5; transform: scale(1.2); }
  100% { opacity: 1; transform: scale(1); }
}

/* TradingView Chart Styling */
.trading-chart {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.trading-chart > div:last-child {
  flex: 1;
  min-height: 0;
  border-radius: 8px;
  overflow: hidden;
}

.symbol-selector {
  position: relative;
}

.symbol-dropdown {
  background: var(--trade-darker);
  color: var(--trade-neon);
  border: 1px solid var(--trade-neon);
  border-radius: 6px;
  padding: 0.4rem 0.8rem;
  font-size: 0.8rem;
  font-weight: 600;
  cursor: pointer;
  outline: none;
  transition: all 0.3s ease;
}

.symbol-dropdown:hover {
  background: var(--trade-neon);
  color: var(--trade-dark);
  box-shadow: 0 0 15px rgba(0, 245, 160, 0.3);
}

.symbol-dropdown option {
  background: var(--trade-darker);
  color: var(--trade-text);
}

/* OrderBook Widget */
.simple-orderbook,
.order-book-widget {
  height: 100%;
  display: flex;
  flex-direction: column;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
}

.orderbook-container {
  flex: 1;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.section-header {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
  padding: 0.75rem 0;
  color: var(--trade-text-muted);
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 1px;
  border-bottom: 1px solid var(--trade-border);
}

.order-row {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
  padding: 0.5rem 0;
  font-size: 0.85rem;
  font-weight: 500;
  transition: background 0.2s ease;
  border-radius: 4px;
}

.order-row:hover {
  background: rgba(255, 255, 255, 0.05);
}

.ask-price {
  color: var(--trade-alert);
  font-weight: 700;
}

.bid-price {
  color: var(--trade-neon);
  font-weight: 700;
}

.size, .total {
  color: var(--trade-text);
  text-align: right;
  font-family: 'SF Mono', monospace;
}

.spread-indicator {
  padding: 1rem 0;
  text-align: center;
  border: 1px solid var(--trade-border);
  margin: 1rem 0;
  border-radius: 8px;
  background: rgba(0, 245, 160, 0.05);
}

.spread-value {
  color: var(--trade-text-muted);
  font-size: 0.9rem;
  font-weight: 600;
}

/* News Widget */
.news-widget {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.news-list {
  flex: 1;
  overflow-y: auto;
  gap: 0.75rem;
  display: flex;
  flex-direction: column;
}

.news-item {
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  border-left: 3px solid var(--trade-neon);
  transition: all 0.3s ease;
  cursor: pointer;
}

.news-item:hover {
  background: rgba(0, 245, 160, 0.1);
  transform: translateX(4px);
}

.news-item.positive {
  border-left-color: var(--trade-neon);
}

.news-item.negative {
  border-left-color: var(--trade-alert);
}

.news-time {
  color: var(--trade-text-muted);
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.news-headline {
  display: block;
  margin-top: 0.5rem;
  color: var(--trade-text);
  font-weight: 500;
  line-height: 1.4;
}

/* Fundamentals Widget */
.fundamentals-widget {
  height: 100%;
}

.fundamentals-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.metric {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  border: 1px solid var(--trade-border);
  transition: all 0.3s ease;
}

.metric:hover {
  background: rgba(0, 245, 160, 0.1);
  border-color: var(--trade-neon);
}

.metric .label {
  color: var(--trade-text-muted);
  font-size: 0.85rem;
  font-weight: 500;
}

.metric .value {
  color: var(--trade-neon);
  font-weight: 700;
  font-size: 1.1rem;
  font-family: 'SF Mono', monospace;
}

/* Portfolio Widget */
.portfolio-widget {
  height: 100%;
}

.total-pnl {
  color: var(--trade-neon);
  font-weight: 700;
  font-size: 0.9rem;
  background: rgba(0, 245, 160, 0.1);
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  border: 1px solid var(--trade-neon);
}

.holdings-list {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr;
  gap: 0.5rem;
  margin-top: 1rem;
}

.holding-item {
  display: contents;
  font-weight: 600;
}

.holding-item > div {
  padding: 0.75rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 6px;
  text-align: center;
}

.positive {
  color: var(--trade-neon);
}

.negative {
  color: var(--trade-alert);
}

/* Leaderboard Widget */
.leaderboard-widget {
  height: 100%;
}

.leaderboard-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.leaderboard-item {
  display: grid;
  grid-template-columns: auto 2fr auto auto;
  gap: 1rem;
  align-items: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  border: 1px solid var(--trade-border);
  transition: all 0.3s ease;
}

.leaderboard-item:hover {
  background: rgba(0, 245, 160, 0.1);
  border-color: var(--trade-neon);
  transform: translateY(-2px);
}

.rank {
  background: var(--gradient-primary);
  color: var(--trade-dark);
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 800;
  font-size: 0.9rem;
}

.name {
  font-weight: 600;
  color: var(--trade-text);
}

.pnl {
  font-weight: 700;
  font-family: 'SF Mono', monospace;
}

.streak {
  color: var(--trade-text-muted);
  font-size: 0.8rem;
}

/* Challenges Widget */
.challenges-widget {
  height: 100%;
}

.challenges-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.challenge-item {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
  padding: 1.5rem;
  border: 1px solid var(--trade-border);
  transition: all 0.3s ease;
}

.challenge-item:hover {
  background: rgba(0, 245, 160, 0.1);
  border-color: var(--trade-neon);
}

.challenge-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.challenge-header h4 {
  color: var(--trade-text);
  font-weight: 600;
  margin: 0;
}

.status {
  background: var(--trade-neon);
  color: var(--trade-dark);
  padding: 0.25rem 0.75rem;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 700;
  text-transform: uppercase;
}

.status.active {
  background: var(--trade-neon);
  animation: pulse-glow 2s infinite;
}

@keyframes pulse-glow {
  0% { box-shadow: 0 0 5px rgba(0, 245, 160, 0.5); }
  50% { box-shadow: 0 0 20px rgba(0, 245, 160, 0.8); }
  100% { box-shadow: 0 0 5px rgba(0, 245, 160, 0.5); }
}

.progress-container {
  width: 100%;
  height: 8px;
  background: var(--trade-darker);
  border-radius: 4px;
  overflow: hidden;
  margin: 0.75rem 0;
}

.progress-bar {
  height: 100%;
  background: var(--gradient-primary);
  border-radius: 4px;
  transition: width 0.5s ease;
  position: relative;
}

.progress-bar::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

.progress-text {
  color: var(--trade-text-muted);
  font-size: 0.8rem;
  font-weight: 500;
}

/* Voice Assistant */
.voice-assistant {
  height: 100%;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.voice-button {
  background: var(--gradient-primary);
  color: var(--trade-dark);
  border: none;
  padding: 1.25rem 2rem;
  border-radius: 25px;
  font-size: 1.1rem;
  font-weight: 700;
  cursor: pointer;
  margin-bottom: 1.5rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  text-transform: uppercase;
  letter-spacing: 0.5px;
  position: relative;
  overflow: hidden;
}

.voice-button::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  background: rgba(255, 255, 255, 0.3);
  transition: all 0.3s ease;
  border-radius: 50%;
  transform: translate(-50%, -50%);
}

.voice-button:hover {
  transform: translateY(-3px);
  box-shadow: 0 15px 30px rgba(0, 245, 160, 0.4);
}

.voice-button:hover::before {
  width: 300px;
  height: 300px;
}

.voice-button.listening {
  background: var(--trade-alert);
  animation: listening-pulse 1.5s infinite;
}

@keyframes listening-pulse {
  0% { 
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(255, 107, 107, 0.7);
  }
  70% { 
    transform: scale(1.05);
    box-shadow: 0 0 0 20px rgba(255, 107, 107, 0);
  }
  100% { 
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(255, 107, 107, 0);
  }
}

.transcript, .ai-response {
  background: rgba(0, 245, 160, 0.1);
  padding: 1rem;
  border-radius: 12px;
  margin: 0.75rem 0;
  border-left: 4px solid var(--trade-neon);
  text-align: left;
}

.ai-response {
  background: rgba(0, 212, 255, 0.1);
  border-left-color: var(--trade-cyan);
}

.suggested-commands {
  margin-top: 1rem;
  text-align: left;
}

.commands-label {
  color: var(--trade-text-muted);
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: 0.75rem;
}

.suggested-commands ul {
  list-style: none;
  padding: 0;
}

.suggested-commands li {
  padding: 0.5rem 0;
  color: var(--trade-text-muted);
  font-size: 0.85rem;
  border-bottom: 1px solid var(--trade-border);
  transition: color 0.3s ease;
}

.suggested-commands li:hover {
  color: var(--trade-neon);
  cursor: pointer;
}

.suggested-commands li:last-child {
  border-bottom: none;
}

/* Risk Widget */
.risk-widget {
  height: 100%;
}

.risk-metrics {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

/* Error Styling */
.financial-error,
.error-fallback {
  background: linear-gradient(135deg, var(--trade-slate), var(--trade-slate-light));
  border: 2px solid var(--trade-alert);
  border-radius: 16px;
  padding: 2rem;
  text-align: center;
  color: var(--trade-text);
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.error-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
  color: var(--trade-alert);
}

.retry-button, .reload-button {
  background: var(--gradient-primary);
  color: var(--trade-dark);
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 12px;
  font-weight: 700;
  cursor: pointer;
  margin-top: 1rem;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.retry-button:hover, .reload-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 20px rgba(0, 245, 160, 0.3);
}

/* Unknown Widget Styling */
.unknown-widget {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  background: rgba(255, 107, 107, 0.1);
  border: 2px dashed var(--trade-alert);
  border-radius: 12px;
  color: var(--trade-alert);
  font-weight: 600;
  text-align: center;
}

/* Drag Handle */
.drag-handle {
  position: absolute;
  top: 8px;
  right: 8px;
  color: rgba(255, 255, 255, 0.3);
  cursor: move;
  font-size: 1.2rem;
  z-index: 10;
  transition: color 0.3s ease;
  user-select: none;
}

.drag-handle:hover {
  color: var(--trade-neon);
}

/* Resize Handle */
.react-resizable-handle {
  position: absolute;
  width: 20px;
  height: 20px;
  bottom: 0;
  right: 0;
  background: var(--trade-neon);
  cursor: se-resize;
  border-radius: 0 0 16px 0;
  opacity: 0.7;
  transition: opacity 0.3s ease;
}

.react-resizable-handle:hover {
  opacity: 1;
}

.react-resizable-handle::after {
  content: "";
  position: absolute;
  right: 4px;
  bottom: 4px;
  width: 6px;
  height: 6px;
  border-right: 2px solid var(--trade-dark);
  border-bottom: 2px solid var(--trade-dark);
}

/* Responsive Design */
@media (max-width: 1200px) {
  .dashboard-container {
    padding: 1rem;
  }
  
  .dashboard-header h1 {
    font-size: 2rem;
  }
  
  .profile-switcher {
    flex-direction: column;
    gap: 0.5rem;
  }
}

@media (max-width: 768px) {
  .dashboard-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
  
  .widget-header {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }
  
  .fundamentals-grid,
  .risk-metrics {
    grid-template-columns: 1fr;
  }
  
  .holdings-list {
    grid-template-columns: 1fr;
  }
  
  .leaderboard-item {
    grid-template-columns: auto 1fr;
    gap: 0.5rem;
  }
  
  .voice-button {
    padding: 1rem 1.5rem;
    font-size: 1rem;
  }
}

/* Animation Classes */
.fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.slide-in {
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from { transform: translateX(-100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

/* Performance Optimizations */
.react-grid-item.cssTransforms {
  transition-property: transform, width, height;
}

.react-grid-item.resizing {
  transition: none;
}

.react-grid-item.dragging {
  transition: none;
}

/* Focus States for Accessibility */
.profile-btn:focus,
.voice-button:focus,
.symbol-dropdown:focus {
  outline: 2px solid var(--trade-neon);
  outline-offset: 2px;
}

/* Print Styles */
@media print {
  .dashboard-container {
    background: white;
    color: black;
  }
  
  .widget {
    background: white;
    border: 1px solid #ccc;
  }
  
  .drag-handle,
  .react-resizable-handle {
    display: none;
  }
}
</file>

<file path="src/utils/layout-helpers.js">
// src/utils/layout-helpers.js

export function saveLayout(profile, layout) {
  localStorage.setItem(`dashboard_layout_${profile}`, JSON.stringify(layout));
}

export function loadLayout(profile) {
  const data = localStorage.getItem(`dashboard_layout_${profile}`);
  return data ? JSON.parse(data) : null;
}

export function resetLayout(profile, defaultLayout) {
  saveLayout(profile, defaultLayout);
  return defaultLayout;
}
</file>

<file path="src/utils/layout-validation.js">
// Validation based on search results recommendations
export const validateLayoutItem = (item) => {
  // Ensure positive dimensions (search result [3])
  const w = Math.max(1, Number(item.w) || 4);
  const h = Math.max(1, Number(item.h) || 4);
  
  // Calculate safe min/max values to prevent collisions (search result [7])
  const safeMinW = Math.max(1, Math.min(w, Number(item.minW) || 1));
  const safeMaxW = Math.max(w, Number(item.maxW) || 12);
  const safeMinH = Math.max(1, Math.min(h, Number(item.minH) || 1));
  const safeMaxH = Math.max(h, Number(item.maxH) || 12);
  
  return {
    i: item.i,
    x: Math.max(0, Number(item.x) || 0),
    y: Math.max(0, Number(item.y) || 0),
    w: w,
    h: h,
    minW: safeMinW,
    maxW: safeMaxW,
    minH: safeMinH,
    maxH: safeMaxH
  };
};

export const validateLayouts = (layouts) => {
  if (!layouts || typeof layouts !== 'object') {
    return { lg: [], md: [], sm: [], xs: [] };
  }
  
  const validated = {};
  Object.keys(layouts).forEach(breakpoint => {
    if (Array.isArray(layouts[breakpoint])) {
      validated[breakpoint] = layouts[breakpoint].map(validateLayoutItem);
    } else {
      validated[breakpoint] = [];
    }
  });
  
  return validated;
};
</file>

<file path="src/utils/numbers.js">
export function validateNumber(input) {
  try {
    return new Big(input);
  } catch (error) {
    console.error('Invalid number format:', input);
    return new Big(0);  // Return safe default
  }
}
</file>

</files>
